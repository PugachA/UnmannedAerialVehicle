
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004910  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab8  08004ab8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000000c  08004ad4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004ad4  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8c9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce5  00000000  00000000  0002c905  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002f220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002298d  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d49  00000000  00000000  00052705  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca57c  00000000  00000000  0005b44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  00125a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a80 	.word	0x08004a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a80 	.word	0x08004a80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>:
//external global variables:
//----------------------
extern TIM_HandleTypeDef htim2, htim5;
//----------------------

RcChannel::RcChannel(TIM_HandleTypeDef *htim, uint8_t channel_num, uint16_t channel_min_value, uint16_t channel_max_value)
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	80bb      	strh	r3, [r7, #4]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2200      	movs	r2, #0
 80004e8:	805a      	strh	r2, [r3, #2]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2200      	movs	r2, #0
 80004ee:	809a      	strh	r2, [r3, #4]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2200      	movs	r2, #0
 8000506:	751a      	strb	r2, [r3, #20]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
{
	this->channel_min_value = channel_min_value;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	88ba      	ldrh	r2, [r7, #4]
 8000512:	809a      	strh	r2, [r3, #4]
	this->channel_max_value = channel_max_value;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	8b3a      	ldrh	r2, [r7, #24]
 8000518:	801a      	strh	r2, [r3, #0]
	this->channel_mid_value = channel_min_value + (channel_max_value - channel_min_value)/2;
 800051a:	8b3a      	ldrh	r2, [r7, #24]
 800051c:	88bb      	ldrh	r3, [r7, #4]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	0fda      	lsrs	r2, r3, #31
 8000522:	4413      	add	r3, r2
 8000524:	105b      	asrs	r3, r3, #1
 8000526:	b29a      	uxth	r2, r3
 8000528:	88bb      	ldrh	r3, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	b29a      	uxth	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	805a      	strh	r2, [r3, #2]

	this->htim = htim;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	61da      	str	r2, [r3, #28]
	switch(channel_num)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	3b01      	subs	r3, #1
 800053c:	2b03      	cmp	r3, #3
 800053e:	d81b      	bhi.n	8000578 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt+0xb0>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt+0x80>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000559 	.word	0x08000559
 800054c:	08000561 	.word	0x08000561
 8000550:	08000569 	.word	0x08000569
 8000554:	08000571 	.word	0x08000571
	{
		case 1: tim_channel = TIM_CHANNEL_1; break;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	e00b      	b.n	8000578 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt+0xb0>
		case 2: tim_channel = TIM_CHANNEL_2; break;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2204      	movs	r2, #4
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	e007      	b.n	8000578 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt+0xb0>
		case 3: tim_channel = TIM_CHANNEL_3; break;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2208      	movs	r2, #8
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	e003      	b.n	8000578 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt+0xb0>
		case 4: tim_channel = TIM_CHANNEL_4; break;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	220c      	movs	r2, #12
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	bf00      	nop
	}
}
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_ZN9RcChannelD1Ev>:
RcChannel::~RcChannel()
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
{

}
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_ZN9RcChannel13getPulseWidthEv>:
uint32_t RcChannel::getPulseWidth()
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
	return Difference;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	691b      	ldr	r3, [r3, #16]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_ZN9RcChannel18getChannelMinWidthEv>:
uint32_t RcChannel::getChannelMaxWidth()
{
	return channel_max_value;
}
uint32_t RcChannel::getChannelMinWidth()
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	return channel_min_value;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	889b      	ldrh	r3, [r3, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_ZN9RcChannel18getChannelMidWidthEv>:
uint32_t RcChannel::getChannelMidWidth()
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	return channel_mid_value;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	885b      	ldrh	r3, [r3, #2]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_ZN9RcChannel14pulseWidthCalcEv>:
void RcChannel::pulseWidthCalc()
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	if (Is_First_Captured==0) // if the first value is not captured
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7d1b      	ldrb	r3, [r3, #20]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d17c      	bne.n	80006f0 <_ZN9RcChannel14pulseWidthCalcEv+0x10a>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(this->htim, tim_channel); // read the first value
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4619      	mov	r1, r3
 8000600:	4610      	mov	r0, r2
 8000602:	f002 ff29 	bl	8003458 <HAL_TIM_ReadCapturedValue>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	609a      	str	r2, [r3, #8]
		Is_First_Captured = 1;  // set the first captured as true
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	751a      	strb	r2, [r3, #20]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10a      	bne.n	8000630 <_ZN9RcChannel14pulseWidthCalcEv+0x4a>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a1a      	ldr	r2, [r3, #32]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 020a 	bic.w	r2, r2, #10
 800062c:	621a      	str	r2, [r3, #32]
 800062e:	e027      	b.n	8000680 <_ZN9RcChannel14pulseWidthCalcEv+0x9a>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d10a      	bne.n	800064e <_ZN9RcChannel14pulseWidthCalcEv+0x68>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a1a      	ldr	r2, [r3, #32]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800064a:	621a      	str	r2, [r3, #32]
 800064c:	e018      	b.n	8000680 <_ZN9RcChannel14pulseWidthCalcEv+0x9a>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d10a      	bne.n	800066c <_ZN9RcChannel14pulseWidthCalcEv+0x86>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6a1a      	ldr	r2, [r3, #32]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000668:	621a      	str	r2, [r3, #32]
 800066a:	e009      	b.n	8000680 <_ZN9RcChannel14pulseWidthCalcEv+0x9a>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6a1a      	ldr	r2, [r3, #32]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800067e:	621a      	str	r2, [r3, #32]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10a      	bne.n	800069e <_ZN9RcChannel14pulseWidthCalcEv+0xb8>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a1a      	ldr	r2, [r3, #32]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f042 0202 	orr.w	r2, r2, #2
 800069a:	621a      	str	r2, [r3, #32]
			}
			Is_First_Captured = 0; // set it back to false
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
		}
}
 800069c:	e0ae      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d10a      	bne.n	80006bc <_ZN9RcChannel14pulseWidthCalcEv+0xd6>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a1a      	ldr	r2, [r3, #32]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0220 	orr.w	r2, r2, #32
 80006b8:	621a      	str	r2, [r3, #32]
}
 80006ba:	e09f      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d10a      	bne.n	80006da <_ZN9RcChannel14pulseWidthCalcEv+0xf4>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6a1a      	ldr	r2, [r3, #32]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006d6:	621a      	str	r2, [r3, #32]
}
 80006d8:	e090      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80006ec:	621a      	str	r2, [r3, #32]
}
 80006ee:	e085      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
		if (Is_First_Captured==1)   // if the first is already captured
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7d1b      	ldrb	r3, [r3, #20]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f040 8081 	bne.w	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
			IC_Val2 = HAL_TIM_ReadCapturedValue(this->htim, tim_channel);  // read second value
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4619      	mov	r1, r3
 8000704:	4610      	mov	r0, r2
 8000706:	f002 fea7 	bl	8003458 <HAL_TIM_ReadCapturedValue>
 800070a:	4602      	mov	r2, r0
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
			if (IC_Val2 > IC_Val1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	429a      	cmp	r2, r3
 800071a:	d906      	bls.n	800072a <_ZN9RcChannel14pulseWidthCalcEv+0x144>
				Difference = IC_Val2-IC_Val1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	1ad2      	subs	r2, r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	611a      	str	r2, [r3, #16]
			Is_First_Captured = 0; // set it back to false
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	751a      	strb	r2, [r3, #20]
			__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10a      	bne.n	800074e <_ZN9RcChannel14pulseWidthCalcEv+0x168>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6a1a      	ldr	r2, [r3, #32]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 020a 	bic.w	r2, r2, #10
 800074a:	621a      	str	r2, [r3, #32]
 800074c:	e027      	b.n	800079e <_ZN9RcChannel14pulseWidthCalcEv+0x1b8>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d10a      	bne.n	800076c <_ZN9RcChannel14pulseWidthCalcEv+0x186>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6a1a      	ldr	r2, [r3, #32]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000768:	621a      	str	r2, [r3, #32]
 800076a:	e018      	b.n	800079e <_ZN9RcChannel14pulseWidthCalcEv+0x1b8>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	2b08      	cmp	r3, #8
 8000772:	d10a      	bne.n	800078a <_ZN9RcChannel14pulseWidthCalcEv+0x1a4>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6a1a      	ldr	r2, [r3, #32]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000786:	621a      	str	r2, [r3, #32]
 8000788:	e009      	b.n	800079e <_ZN9RcChannel14pulseWidthCalcEv+0x1b8>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6a1a      	ldr	r2, [r3, #32]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800079c:	621a      	str	r2, [r3, #32]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d108      	bne.n	80007b8 <_ZN9RcChannel14pulseWidthCalcEv+0x1d2>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6a12      	ldr	r2, [r2, #32]
 80007b4:	621a      	str	r2, [r3, #32]
}
 80007b6:	e021      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
			__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d108      	bne.n	80007d2 <_ZN9RcChannel14pulseWidthCalcEv+0x1ec>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6a12      	ldr	r2, [r2, #32]
 80007ce:	621a      	str	r2, [r3, #32]
}
 80007d0:	e014      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
			__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	2b08      	cmp	r3, #8
 80007d8:	d108      	bne.n	80007ec <_ZN9RcChannel14pulseWidthCalcEv+0x206>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6a12      	ldr	r2, [r2, #32]
 80007e8:	621a      	str	r2, [r3, #32]
}
 80007ea:	e007      	b.n	80007fc <_ZN9RcChannel14pulseWidthCalcEv+0x216>
			__HAL_TIM_SET_CAPTUREPOLARITY(this->htim, tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6a12      	ldr	r2, [r2, #32]
 80007fa:	621a      	str	r2, [r3, #32]
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZN9RcChannel16getPulseWidthDifEv>:
uint32_t RcChannel::getPulseWidthDif()
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	return  ((int16_t)(this->channel_mid_value) - ((int16_t)(this->Difference) - (int16_t)(this->channel_mid_value)));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	885b      	ldrh	r3, [r3, #2]
 8000810:	b21b      	sxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	885b      	ldrh	r3, [r3, #2]
 8000820:	b21b      	sxth	r3, r3
 8000822:	1acb      	subs	r3, r1, r3
 8000824:	1ad3      	subs	r3, r2, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_ZN9RcChannel13matchMinValueEv>:
uint8_t RcChannel::matchMinValue()
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	if( (this->getPulseWidth() > (this->channel_min_value - 4)) && (this->getPulseWidth() < (this->channel_min_value + 4)) )
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff feaf 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000840:	4602      	mov	r2, r0
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	889b      	ldrh	r3, [r3, #4]
 8000846:	3b04      	subs	r3, #4
 8000848:	429a      	cmp	r2, r3
 800084a:	d90a      	bls.n	8000862 <_ZN9RcChannel13matchMinValueEv+0x30>
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fea6 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000852:	4602      	mov	r2, r0
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	889b      	ldrh	r3, [r3, #4]
 8000858:	3304      	adds	r3, #4
 800085a:	429a      	cmp	r2, r3
 800085c:	d201      	bcs.n	8000862 <_ZN9RcChannel13matchMinValueEv+0x30>
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <_ZN9RcChannel13matchMinValueEv+0x32>
 8000862:	2300      	movs	r3, #0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <_ZN9RcChannel13matchMinValueEv+0x3a>
	{
		return 1;
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <_ZN9RcChannel13matchMinValueEv+0x3c>
	} else
	{
		return 0;
 800086c:	2300      	movs	r3, #0
	}
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_ZN9RcChannel13matchMaxValueEv>:
uint8_t RcChannel::matchMaxValue()
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	if( (this->getPulseWidth() > (this->channel_max_value - 4)) && (this->getPulseWidth() < (this->channel_max_value + 4)) )
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe8d 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000884:	4602      	mov	r2, r0
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	3b04      	subs	r3, #4
 800088c:	429a      	cmp	r2, r3
 800088e:	d90a      	bls.n	80008a6 <_ZN9RcChannel13matchMaxValueEv+0x30>
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fe84 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000896:	4602      	mov	r2, r0
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3304      	adds	r3, #4
 800089e:	429a      	cmp	r2, r3
 80008a0:	d201      	bcs.n	80008a6 <_ZN9RcChannel13matchMaxValueEv+0x30>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <_ZN9RcChannel13matchMaxValueEv+0x32>
 80008a6:	2300      	movs	r3, #0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <_ZN9RcChannel13matchMaxValueEv+0x3a>
	{
		return 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <_ZN9RcChannel13matchMaxValueEv+0x3c>
	} else
	{
		return 0;
 80008b0:	2300      	movs	r3, #0
	}
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <_Z13IcHandlerTim2P19__TIM_HandleTypeDef>:
RcChannel thr_rc(&htim2, 1, 885, 1850), elev_rc(&htim2, 2, 1080, 1863),
		  ail_rc(&htim2, 3, 1083, 1863), rud_rc(&htim2, 4, 1080, 1863),
		  switch_rc(&htim5, 1, 1080, 1863);
		  
void IcHandlerTim2(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	switch ( (uint8_t) htim->Channel )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d822      	bhi.n	8000914 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x58>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x18>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080008f5 	.word	0x080008f5
 80008d8:	080008fd 	.word	0x080008fd
 80008dc:	08000915 	.word	0x08000915
 80008e0:	08000905 	.word	0x08000905
 80008e4:	08000915 	.word	0x08000915
 80008e8:	08000915 	.word	0x08000915
 80008ec:	08000915 	.word	0x08000915
 80008f0:	0800090d 	.word	0x0800090d
	{
		case HAL_TIM_ACTIVE_CHANNEL_1:
		{
			thr_rc.pulseWidthCalc();
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x60>)
 80008f6:	f7ff fe76 	bl	80005e6 <_ZN9RcChannel14pulseWidthCalcEv>
		} break;
 80008fa:	e00b      	b.n	8000914 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x58>
		case HAL_TIM_ACTIVE_CHANNEL_2:
		{
			elev_rc.pulseWidthCalc();
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x64>)
 80008fe:	f7ff fe72 	bl	80005e6 <_ZN9RcChannel14pulseWidthCalcEv>
		} break;
 8000902:	e007      	b.n	8000914 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x58>
		case HAL_TIM_ACTIVE_CHANNEL_3:
		{
			ail_rc.pulseWidthCalc();
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x68>)
 8000906:	f7ff fe6e 	bl	80005e6 <_ZN9RcChannel14pulseWidthCalcEv>
		} break;
 800090a:	e003      	b.n	8000914 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x58>
		case HAL_TIM_ACTIVE_CHANNEL_4:
		{
			rud_rc.pulseWidthCalc();
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <_Z13IcHandlerTim2P19__TIM_HandleTypeDef+0x6c>)
 800090e:	f7ff fe6a 	bl	80005e6 <_ZN9RcChannel14pulseWidthCalcEv>
		} break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000028 	.word	0x20000028
 8000920:	20000048 	.word	0x20000048
 8000924:	20000068 	.word	0x20000068
 8000928:	20000088 	.word	0x20000088

0800092c <_Z13IcHandlerTim5P19__TIM_HandleTypeDef>:

void IcHandlerTim5(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	switch ( (uint8_t) htim->Channel )
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7f1b      	ldrb	r3, [r3, #28]
 8000938:	3b01      	subs	r3, #1
 800093a:	2b07      	cmp	r3, #7
 800093c:	d817      	bhi.n	800096e <_Z13IcHandlerTim5P19__TIM_HandleTypeDef+0x42>
 800093e:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <_Z13IcHandlerTim5P19__TIM_HandleTypeDef+0x18>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	08000965 	.word	0x08000965
 8000948:	0800096d 	.word	0x0800096d
 800094c:	0800096f 	.word	0x0800096f
 8000950:	0800096d 	.word	0x0800096d
 8000954:	0800096f 	.word	0x0800096f
 8000958:	0800096f 	.word	0x0800096f
 800095c:	0800096f 	.word	0x0800096f
 8000960:	0800096d 	.word	0x0800096d
	{
		case HAL_TIM_ACTIVE_CHANNEL_1:
		{
			switch_rc.pulseWidthCalc();
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <_Z13IcHandlerTim5P19__TIM_HandleTypeDef+0x4c>)
 8000966:	f7ff fe3e 	bl	80005e6 <_ZN9RcChannel14pulseWidthCalcEv>
		} break;
 800096a:	e000      	b.n	800096e <_Z13IcHandlerTim5P19__TIM_HandleTypeDef+0x42>
		case HAL_TIM_ACTIVE_CHANNEL_2:
		{

		} break;
 800096c:	bf00      	nop
		case HAL_TIM_ACTIVE_CHANNEL_4:
		{

		} break;
	}
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000a8 	.word	0x200000a8

0800097c <_Z41__static_initialization_and_destruction_0ii>:
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d136      	bne.n	80009fa <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000992:	4293      	cmp	r3, r2
 8000994:	d131      	bne.n	80009fa <_Z41__static_initialization_and_destruction_0ii+0x7e>
RcChannel thr_rc(&htim2, 1, 885, 1850), elev_rc(&htim2, 2, 1080, 1863),
 8000996:	f240 733a 	movw	r3, #1850	; 0x73a
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	f240 3375 	movw	r3, #885	; 0x375
 80009a0:	2201      	movs	r2, #1
 80009a2:	4923      	ldr	r1, [pc, #140]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80009a4:	4823      	ldr	r0, [pc, #140]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009a6:	f7ff fd8f 	bl	80004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>
 80009aa:	f240 7347 	movw	r3, #1863	; 0x747
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009b4:	2202      	movs	r2, #2
 80009b6:	491e      	ldr	r1, [pc, #120]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ba:	f7ff fd85 	bl	80004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>
		  ail_rc(&htim2, 3, 1083, 1863), rud_rc(&htim2, 4, 1080, 1863),
 80009be:	f240 7347 	movw	r3, #1863	; 0x747
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	f240 433b 	movw	r3, #1083	; 0x43b
 80009c8:	2203      	movs	r2, #3
 80009ca:	4919      	ldr	r1, [pc, #100]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009ce:	f7ff fd7b 	bl	80004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>
 80009d2:	f240 7347 	movw	r3, #1863	; 0x747
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009dc:	2204      	movs	r2, #4
 80009de:	4914      	ldr	r1, [pc, #80]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e2:	f7ff fd71 	bl	80004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>
		  switch_rc(&htim5, 1, 1080, 1863);
 80009e6:	f240 7347 	movw	r3, #1863	; 0x747
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009f0:	2201      	movs	r2, #1
 80009f2:	4914      	ldr	r1, [pc, #80]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80009f6:	f7ff fd67 	bl	80004c8 <_ZN9RcChannelC1EP19__TIM_HandleTypeDefhtt>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d113      	bne.n	8000a28 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10e      	bne.n	8000a28 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8000a0c:	f7ff fdbc 	bl	8000588 <_ZN9RcChannelD1Ev>
		  ail_rc(&htim2, 3, 1083, 1863), rud_rc(&htim2, 4, 1080, 1863),
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a12:	f7ff fdb9 	bl	8000588 <_ZN9RcChannelD1Ev>
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a18:	f7ff fdb6 	bl	8000588 <_ZN9RcChannelD1Ev>
RcChannel thr_rc(&htim2, 1, 885, 1850), elev_rc(&htim2, 2, 1080, 1863),
 8000a1c:	4806      	ldr	r0, [pc, #24]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a1e:	f7ff fdb3 	bl	8000588 <_ZN9RcChannelD1Ev>
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a24:	f7ff fdb0 	bl	8000588 <_ZN9RcChannelD1Ev>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	20000028 	.word	0x20000028
 8000a38:	20000048 	.word	0x20000048
 8000a3c:	20000068 	.word	0x20000068
 8000a40:	20000088 	.word	0x20000088
 8000a44:	20000220 	.word	0x20000220
 8000a48:	200000a8 	.word	0x200000a8

08000a4c <_GLOBAL__sub_I__ZN9RcChannelC2EP19__TIM_HandleTypeDefhtt>:
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff ff91 	bl	800097c <_Z41__static_initialization_and_destruction_0ii>
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_GLOBAL__sub_D__ZN9RcChannelC2EP19__TIM_HandleTypeDefhtt>:
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ff89 	bl	800097c <_Z41__static_initialization_and_destruction_0ii>
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN5ServoC1EP11TIM_TypeDefh>:
	this->channel = channel;
	this->min_PWM_value = min_PWM_value;
	this->max_PWM_value = max_PWM_value;
	this->max_Angle = 180;
}
Servo::Servo(TIM_TypeDef* TIM, uint8_t channel)
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	4613      	mov	r3, r2
 8000a78:	71fb      	strb	r3, [r7, #7]
{
	this->TIM = TIM;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	605a      	str	r2, [r3, #4]
	this->channel = channel;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	721a      	strb	r2, [r3, #8]
	this->min_PWM_value = 0;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	805a      	strh	r2, [r3, #2]
	this->max_PWM_value = 0;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	801a      	strh	r2, [r3, #0]
	this->max_Angle = 0;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	815a      	strh	r2, [r3, #10]
}
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_ZN5Servo23setPositionMicroSecondsEm>:
void Servo::setPositionMicroSeconds(uint32_t position)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	switch (this->channel)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d81f      	bhi.n	8000afc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <_ZN5Servo23setPositionMicroSecondsEm+0x1c>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000adf 	.word	0x08000adf
 8000acc:	08000ae9 	.word	0x08000ae9
 8000ad0:	08000af3 	.word	0x08000af3
	{
		case 1:
			this->TIM->CCR1 = position;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000adc:	e00e      	b.n	8000afc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 2:
			this->TIM->CCR2 = position;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000ae6:	e009      	b.n	8000afc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 3:
			this->TIM->CCR3 = position;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000af0:	e004      	b.n	8000afc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 4:
			this->TIM->CCR4 = position;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000afa:	bf00      	nop
	}
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_ZN6BeeperC1EP12GPIO_TypeDefm>:
		void shortBeep();
		void longBeep();
		void seriesBeep();

};
Beeper::Beeper(GPIO_TypeDef * port, uint32_t pin)
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b26:	811a      	strh	r2, [r3, #8]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2264      	movs	r2, #100	; 0x64
 8000b2c:	815a      	strh	r2, [r3, #10]
{
	this->port = port;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	605a      	str	r2, [r3, #4]
}
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_ZN6Beeper9shortBeepEv>:
Beeper::~Beeper()
{
}
void Beeper::shortBeep()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f001 fb81 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(SHORT_BEEP_TIME_MS);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	895b      	ldrh	r3, [r3, #10]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f8ae 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f001 fb73 	bl	8002264 <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_ZN6Beeper8longBeepEv>:
void Beeper::longBeep()
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f001 fb62 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(LONG_BEEP_TIME_MS);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	891b      	ldrh	r3, [r3, #8]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 f88f 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 fb54 	bl	8002264 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN6Beeper10seriesBeepEv>:
void Beeper::seriesBeep()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	shortBeep();
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffbb 	bl	8000b48 <_ZN6Beeper9shortBeepEv>
	HAL_Delay(SHORT_BEEP_TIME_MS);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	895b      	ldrh	r3, [r3, #10]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f876 	bl	8001cc8 <HAL_Delay>
	shortBeep();
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ffb3 	bl	8000b48 <_ZN6Beeper9shortBeepEv>
	HAL_Delay(SHORT_BEEP_TIME_MS);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	895b      	ldrh	r3, [r3, #10]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f86e 	bl	8001cc8 <HAL_Delay>
	shortBeep();
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffab 	bl	8000b48 <_ZN6Beeper9shortBeepEv>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <_Z5ArmedP6Beeper>:

uint8_t Armed(Beeper* beeper)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	static uint8_t flag = 0;
	if(thr_rc.matchMinValue() && rud_rc.matchMinValue() && elev_rc.matchMinValue() && ail_rc.matchMaxValue())
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <_Z5ArmedP6Beeper+0xa0>)
 8000c06:	f7ff fe14 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d013      	beq.n	8000c38 <_Z5ArmedP6Beeper+0x3c>
 8000c10:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <_Z5ArmedP6Beeper+0xa4>)
 8000c12:	f7ff fe0e 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00d      	beq.n	8000c38 <_Z5ArmedP6Beeper+0x3c>
 8000c1c:	4821      	ldr	r0, [pc, #132]	; (8000ca4 <_Z5ArmedP6Beeper+0xa8>)
 8000c1e:	f7ff fe08 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <_Z5ArmedP6Beeper+0x3c>
 8000c28:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <_Z5ArmedP6Beeper+0xac>)
 8000c2a:	f7ff fe24 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <_Z5ArmedP6Beeper+0x3c>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <_Z5ArmedP6Beeper+0x3e>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <_Z5ArmedP6Beeper+0x4e>
	{
		flag = 1;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <_Z5ArmedP6Beeper+0xb0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
		beeper->longBeep();
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff9e 	bl	8000b86 <_ZN6Beeper8longBeepEv>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
	if(thr_rc.matchMinValue() && rud_rc.matchMaxValue() && elev_rc.matchMinValue() && ail_rc.matchMinValue())
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <_Z5ArmedP6Beeper+0xa0>)
 8000c4c:	f7ff fdf1 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d013      	beq.n	8000c7e <_Z5ArmedP6Beeper+0x82>
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <_Z5ArmedP6Beeper+0xa4>)
 8000c58:	f7ff fe0d 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00d      	beq.n	8000c7e <_Z5ArmedP6Beeper+0x82>
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <_Z5ArmedP6Beeper+0xa8>)
 8000c64:	f7ff fde5 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <_Z5ArmedP6Beeper+0x82>
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <_Z5ArmedP6Beeper+0xac>)
 8000c70:	f7ff fddf 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_Z5ArmedP6Beeper+0x82>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <_Z5ArmedP6Beeper+0x84>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <_Z5ArmedP6Beeper+0x94>
	{
		flag = 0;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <_Z5ArmedP6Beeper+0xb0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		beeper->longBeep();
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff7b 	bl	8000b86 <_ZN6Beeper8longBeepEv>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	return flag;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <_Z5ArmedP6Beeper+0xb0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000088 	.word	0x20000088
 8000ca4:	20000048 	.word	0x20000048
 8000ca8:	20000068 	.word	0x20000068
 8000cac:	2000030c 	.word	0x2000030c

08000cb0 <_Z9ERSarmingP6Beeper>:
uint8_t ERSarming(Beeper* beeper)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	static uint8_t flag = 0;
	if(thr_rc.matchMinValue() && rud_rc.matchMinValue() && elev_rc.matchMinValue() && ail_rc.matchMinValue())
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <_Z9ERSarmingP6Beeper+0xa0>)
 8000cba:	f7ff fdba 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d013      	beq.n	8000cec <_Z9ERSarmingP6Beeper+0x3c>
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <_Z9ERSarmingP6Beeper+0xa4>)
 8000cc6:	f7ff fdb4 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00d      	beq.n	8000cec <_Z9ERSarmingP6Beeper+0x3c>
 8000cd0:	4821      	ldr	r0, [pc, #132]	; (8000d58 <_Z9ERSarmingP6Beeper+0xa8>)
 8000cd2:	f7ff fdae 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d007      	beq.n	8000cec <_Z9ERSarmingP6Beeper+0x3c>
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <_Z9ERSarmingP6Beeper+0xac>)
 8000cde:	f7ff fda8 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <_Z9ERSarmingP6Beeper+0x3c>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <_Z9ERSarmingP6Beeper+0x3e>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <_Z9ERSarmingP6Beeper+0x4e>
	{
		flag = 1;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <_Z9ERSarmingP6Beeper+0xb0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
		beeper->shortBeep();
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff25 	bl	8000b48 <_ZN6Beeper9shortBeepEv>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
	if(thr_rc.matchMinValue() && rud_rc.matchMaxValue() && elev_rc.matchMinValue() && ail_rc.matchMaxValue())
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <_Z9ERSarmingP6Beeper+0xa0>)
 8000d00:	f7ff fd97 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d013      	beq.n	8000d32 <_Z9ERSarmingP6Beeper+0x82>
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <_Z9ERSarmingP6Beeper+0xa4>)
 8000d0c:	f7ff fdb3 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00d      	beq.n	8000d32 <_Z9ERSarmingP6Beeper+0x82>
 8000d16:	4810      	ldr	r0, [pc, #64]	; (8000d58 <_Z9ERSarmingP6Beeper+0xa8>)
 8000d18:	f7ff fd8b 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <_Z9ERSarmingP6Beeper+0x82>
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <_Z9ERSarmingP6Beeper+0xac>)
 8000d24:	f7ff fda7 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_Z9ERSarmingP6Beeper+0x82>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <_Z9ERSarmingP6Beeper+0x84>
 8000d32:	2300      	movs	r3, #0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <_Z9ERSarmingP6Beeper+0x94>
	{
		flag = 0;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <_Z9ERSarmingP6Beeper+0xb0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
		beeper->shortBeep();
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff02 	bl	8000b48 <_ZN6Beeper9shortBeepEv>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	return flag;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <_Z9ERSarmingP6Beeper+0xb0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000028 	.word	0x20000028
 8000d54:	20000088 	.word	0x20000088
 8000d58:	20000048 	.word	0x20000048
 8000d5c:	20000068 	.word	0x20000068
 8000d60:	2000030d 	.word	0x2000030d

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0a0      	sub	sp, #128	; 0x80
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 ff3b 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f9b7 	bl	80010e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 fc9b 	bl	80016ac <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000d76:	f000 fa27 	bl	80011c8 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 8000d7a:	f000 fc69 	bl	8001650 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000d7e:	f000 fadb 	bl	8001338 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000d82:	f000 fb99 	bl	80014b8 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, IcHandlerTim2);
 8000d86:	4acb      	ldr	r2, [pc, #812]	; (80010b4 <main+0x350>)
 8000d88:	2112      	movs	r1, #18
 8000d8a:	48cb      	ldr	r0, [pc, #812]	; (80010b8 <main+0x354>)
 8000d8c:	f002 fc0c 	bl	80035a8 <HAL_TIM_RegisterCallback>
  	HAL_TIM_RegisterCallback(&htim5, HAL_TIM_IC_CAPTURE_CB_ID, IcHandlerTim5);
 8000d90:	4aca      	ldr	r2, [pc, #808]	; (80010bc <main+0x358>)
 8000d92:	2112      	movs	r1, #18
 8000d94:	48ca      	ldr	r0, [pc, #808]	; (80010c0 <main+0x35c>)
 8000d96:	f002 fc07 	bl	80035a8 <HAL_TIM_RegisterCallback>

  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//PA5 thr input
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	48c6      	ldr	r0, [pc, #792]	; (80010b8 <main+0x354>)
 8000d9e:	f001 ffb1 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);//PB3 elev input
 8000da2:	2104      	movs	r1, #4
 8000da4:	48c4      	ldr	r0, [pc, #784]	; (80010b8 <main+0x354>)
 8000da6:	f001 ffad 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);//PB10 ail input
 8000daa:	2108      	movs	r1, #8
 8000dac:	48c2      	ldr	r0, [pc, #776]	; (80010b8 <main+0x354>)
 8000dae:	f001 ffa9 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);//PB11 rud input
 8000db2:	210c      	movs	r1, #12
 8000db4:	48c0      	ldr	r0, [pc, #768]	; (80010b8 <main+0x354>)
 8000db6:	f001 ffa5 	bl	8002d04 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);//PA0 switch input
 8000dba:	2100      	movs	r1, #0
 8000dbc:	48c0      	ldr	r0, [pc, #768]	; (80010c0 <main+0x35c>)
 8000dbe:	f001 ffa1 	bl	8002d04 <HAL_TIM_IC_Start_IT>

  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//PA6 thr output
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	48bf      	ldr	r0, [pc, #764]	; (80010c4 <main+0x360>)
 8000dc6:	f001 ff1d 	bl	8002c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//PA7 elev servo output
 8000dca:	2104      	movs	r1, #4
 8000dcc:	48bd      	ldr	r0, [pc, #756]	; (80010c4 <main+0x360>)
 8000dce:	f001 ff19 	bl	8002c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//PB0 ail servo 1 output
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	48bb      	ldr	r0, [pc, #748]	; (80010c4 <main+0x360>)
 8000dd6:	f001 ff15 	bl	8002c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);//PB1 ail servo 2 output
 8000dda:	210c      	movs	r1, #12
 8000ddc:	48b9      	ldr	r0, [pc, #740]	; (80010c4 <main+0x360>)
 8000dde:	f001 ff11 	bl	8002c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);//PA3 rud servo 2 output
 8000de2:	210c      	movs	r1, #12
 8000de4:	48b6      	ldr	r0, [pc, #728]	; (80010c0 <main+0x35c>)
 8000de6:	f001 ff0d 	bl	8002c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);//PA2 ers servo 2 output
 8000dea:	2108      	movs	r1, #8
 8000dec:	48b4      	ldr	r0, [pc, #720]	; (80010c0 <main+0x35c>)
 8000dee:	f001 ff09 	bl	8002c04 <HAL_TIM_PWM_Start>

  	char str[32];
  	Servo 	thr_servo(htim3.Instance, 1), elev_servo(htim3.Instance, 2),
 8000df2:	4bb4      	ldr	r3, [pc, #720]	; (80010c4 <main+0x360>)
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe35 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>
 8000e02:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <main+0x360>)
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe2d 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>
  			ail_servo_1(htim3.Instance, 3), ail_servo_2(htim3.Instance, 4),
 8000e12:	4bac      	ldr	r3, [pc, #688]	; (80010c4 <main+0x360>)
 8000e14:	6819      	ldr	r1, [r3, #0]
 8000e16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe25 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>
 8000e22:	4ba8      	ldr	r3, [pc, #672]	; (80010c4 <main+0x360>)
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe1d 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>
			rud_servo(htim5.Instance, 4), ers_servo(htim5.Instance, 3);
 8000e32:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <main+0x35c>)
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe15 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>
 8000e42:	4b9f      	ldr	r3, [pc, #636]	; (80010c0 <main+0x35c>)
 8000e44:	6819      	ldr	r1, [r3, #0]
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe0d 	bl	8000a6c <_ZN5ServoC1EP11TIM_TypeDefh>

  	uint32_t ers_servo_set_up_position = 1600;
 8000e52:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000e56:	67fb      	str	r3, [r7, #124]	; 0x7c
  	uint8_t ers_match_counter = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  	ers_servo.setPositionMicroSeconds(ers_servo_set_up_position);
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe1f 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>

  	Beeper beeper(GPIOD, GPIO_PIN_13);
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e70:	4995      	ldr	r1, [pc, #596]	; (80010c8 <main+0x364>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe48 	bl	8000b08 <_ZN6BeeperC1EP12GPIO_TypeDefm>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		while(Armed(&beeper))
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff febe 	bl	8000bfc <_Z5ArmedP6Beeper>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d065      	beq.n	8000f5c <main+0x1f8>
		{

			thr_servo.setPositionMicroSeconds(thr_rc.getPulseWidth());
 8000e90:	488e      	ldr	r0, [pc, #568]	; (80010cc <main+0x368>)
 8000e92:	f7ff fb84 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe02 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			elev_servo.setPositionMicroSeconds(elev_rc.getPulseWidthDif());
 8000ea4:	488a      	ldr	r0, [pc, #552]	; (80010d0 <main+0x36c>)
 8000ea6:	f7ff fcad 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fdf8 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			ail_servo_1.setPositionMicroSeconds(ail_rc.getPulseWidthDif());
 8000eb8:	4886      	ldr	r0, [pc, #536]	; (80010d4 <main+0x370>)
 8000eba:	f7ff fca3 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fdee 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			ail_servo_2.setPositionMicroSeconds(ail_rc.getPulseWidthDif());
 8000ecc:	4881      	ldr	r0, [pc, #516]	; (80010d4 <main+0x370>)
 8000ece:	f7ff fc99 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fde4 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			rud_servo.setPositionMicroSeconds(rud_rc.getPulseWidth());
 8000ee0:	487d      	ldr	r0, [pc, #500]	; (80010d8 <main+0x374>)
 8000ee2:	f7ff fb5c 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fdda 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>

			if(switch_rc.getPulseWidth() > 1500)
 8000ef4:	4879      	ldr	r0, [pc, #484]	; (80010dc <main+0x378>)
 8000ef6:	f7ff fb52 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f00:	429a      	cmp	r2, r3
 8000f02:	bf8c      	ite	hi
 8000f04:	2301      	movhi	r3, #1
 8000f06:	2300      	movls	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d014      	beq.n	8000f38 <main+0x1d4>
			{
				thr_servo.setPositionMicroSeconds(thr_rc.getChannelMinWidth());
 8000f0e:	486f      	ldr	r0, [pc, #444]	; (80010cc <main+0x368>)
 8000f10:	f7ff fb51 	bl	80005b6 <_ZN9RcChannel18getChannelMinWidthEv>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fdc3 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
				HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 fecf 	bl	8001cc8 <HAL_Delay>
				ers_servo.setPositionMicroSeconds(540);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fdb8 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			}
			while(switch_rc.getPulseWidth() > 1500)
 8000f38:	4868      	ldr	r0, [pc, #416]	; (80010dc <main+0x378>)
 8000f3a:	f7ff fb30 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f44:	429a      	cmp	r2, r3
 8000f46:	bf8c      	ite	hi
 8000f48:	2301      	movhi	r3, #1
 8000f4a:	2300      	movls	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d092      	beq.n	8000e78 <main+0x114>
			{
				beeper.seriesBeep();
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe35 	bl	8000bc4 <_ZN6Beeper10seriesBeepEv>
			while(switch_rc.getPulseWidth() > 1500)
 8000f5a:	e7ed      	b.n	8000f38 <main+0x1d4>
			}
		}
		elev_servo.setPositionMicroSeconds(elev_rc.getPulseWidthDif());
 8000f5c:	485c      	ldr	r0, [pc, #368]	; (80010d0 <main+0x36c>)
 8000f5e:	f7ff fc51 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd9c 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
		ail_servo_1.setPositionMicroSeconds(ail_rc.getPulseWidthDif());
 8000f70:	4858      	ldr	r0, [pc, #352]	; (80010d4 <main+0x370>)
 8000f72:	f7ff fc47 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fd92 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
		ail_servo_2.setPositionMicroSeconds(ail_rc.getPulseWidthDif());
 8000f84:	4853      	ldr	r0, [pc, #332]	; (80010d4 <main+0x370>)
 8000f86:	f7ff fc3d 	bl	8000804 <_ZN9RcChannel16getPulseWidthDifEv>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fd88 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
		rud_servo.setPositionMicroSeconds(rud_rc.getPulseWidth());
 8000f98:	484f      	ldr	r0, [pc, #316]	; (80010d8 <main+0x374>)
 8000f9a:	f7ff fb00 	bl	800059e <_ZN9RcChannel13getPulseWidthEv>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd7e 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
		thr_servo.setPositionMicroSeconds(thr_rc.getChannelMinWidth());
 8000fac:	4847      	ldr	r0, [pc, #284]	; (80010cc <main+0x368>)
 8000fae:	f7ff fb02 	bl	80005b6 <_ZN9RcChannel18getChannelMinWidthEv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fd74 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>

		while(ERSarming(&beeper))
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe74 	bl	8000cb0 <_Z9ERSarmingP6Beeper>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f43f af4f 	beq.w	8000e78 <main+0x114>
		{
			elev_servo.setPositionMicroSeconds(elev_rc.getChannelMidWidth());
 8000fda:	483d      	ldr	r0, [pc, #244]	; (80010d0 <main+0x36c>)
 8000fdc:	f7ff faf7 	bl	80005ce <_ZN9RcChannel18getChannelMidWidthEv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fd5d 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			ail_servo_1.setPositionMicroSeconds(ail_rc.getChannelMidWidth());
 8000fee:	4839      	ldr	r0, [pc, #228]	; (80010d4 <main+0x370>)
 8000ff0:	f7ff faed 	bl	80005ce <_ZN9RcChannel18getChannelMidWidthEv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fd53 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			ail_servo_2.setPositionMicroSeconds(ail_rc.getChannelMidWidth());
 8001002:	4834      	ldr	r0, [pc, #208]	; (80010d4 <main+0x370>)
 8001004:	f7ff fae3 	bl	80005ce <_ZN9RcChannel18getChannelMidWidthEv>
 8001008:	4602      	mov	r2, r0
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fd49 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			rud_servo.setPositionMicroSeconds(rud_rc.getChannelMidWidth());
 8001016:	4830      	ldr	r0, [pc, #192]	; (80010d8 <main+0x374>)
 8001018:	f7ff fad9 	bl	80005ce <_ZN9RcChannel18getChannelMidWidthEv>
 800101c:	4602      	mov	r2, r0
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fd3f 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			ers_servo.setPositionMicroSeconds(ers_servo_set_up_position);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd39 	bl	8000aa8 <_ZN5Servo23setPositionMicroSecondsEm>
			if(elev_rc.matchMaxValue())
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <main+0x36c>)
 8001038:	f7ff fc1d 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf14      	ite	ne
 8001042:	2301      	movne	r3, #1
 8001044:	2300      	moveq	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d017      	beq.n	800107c <main+0x318>
			{
				ers_match_counter++;
 800104c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001050:	3301      	adds	r3, #1
 8001052:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				switch (ers_match_counter)
 8001056:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <main+0x300>
 800105e:	2b02      	cmp	r3, #2
 8001060:	d004      	beq.n	800106c <main+0x308>
 8001062:	e007      	b.n	8001074 <main+0x310>
				{
					case 1: ers_servo_set_up_position = 1000; break;
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800106a:	e003      	b.n	8001074 <main+0x310>
					case 2: ers_servo_set_up_position = 1600; break;
 800106c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001072:	bf00      	nop
				}
				HAL_Delay(500);
 8001074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001078:	f000 fe26 	bl	8001cc8 <HAL_Delay>
			}
			if(elev_rc.matchMinValue() && !rud_rc.matchMaxValue())
 800107c:	4814      	ldr	r0, [pc, #80]	; (80010d0 <main+0x36c>)
 800107e:	f7ff fbd8 	bl	8000832 <_ZN9RcChannel13matchMinValueEv>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <main+0x334>
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <main+0x374>)
 800108a:	f7ff fbf4 	bl	8000876 <_ZN9RcChannel13matchMaxValueEv>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <main+0x334>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <main+0x336>
 8001098:	2300      	movs	r3, #0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d090      	beq.n	8000fc0 <main+0x25c>
			{
				ers_servo_set_up_position = 540;
 800109e:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80010a2:	67fb      	str	r3, [r7, #124]	; 0x7c
				ers_match_counter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				HAL_Delay(500);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f000 fe0b 	bl	8001cc8 <HAL_Delay>
		while(ERSarming(&beeper))
 80010b2:	e785      	b.n	8000fc0 <main+0x25c>
 80010b4:	080008bd 	.word	0x080008bd
 80010b8:	200000c8 	.word	0x200000c8
 80010bc:	0800092d 	.word	0x0800092d
 80010c0:	20000220 	.word	0x20000220
 80010c4:	20000174 	.word	0x20000174
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	20000028 	.word	0x20000028
 80010d0:	20000048 	.word	0x20000048
 80010d4:	20000068 	.word	0x20000068
 80010d8:	20000088 	.word	0x20000088
 80010dc:	200000a8 	.word	0x200000a8

080010e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fcbe 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <_Z18SystemClock_Configv+0xe0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <_Z18SystemClock_Configv+0xe0>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <_Z18SystemClock_Configv+0xe0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <_Z18SystemClock_Configv+0xe4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <_Z18SystemClock_Configv+0xe4>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <_Z18SystemClock_Configv+0xe4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001150:	2310      	movs	r3, #16
 8001152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001154:	23c0      	movs	r3, #192	; 0xc0
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f897 	bl	8002298 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800117a:	f000 fae9 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2103      	movs	r1, #3
 800119c:	4618      	mov	r0, r3
 800119e:	f001 faeb 	bl	8002778 <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf14      	ite	ne
 80011a8:	2301      	movne	r3, #1
 80011aa:	2300      	moveq	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80011b2:	f000 facd 	bl	8001750 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80011fa:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 80011fc:	2230      	movs	r2, #48	; 0x30
 80011fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121a:	4846      	ldr	r0, [pc, #280]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 800121c:	f001 fc78 	bl	8002b10 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZL12MX_TIM2_Initv+0x6c>
  {
    Error_Handler();
 8001230:	f000 fa8e 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4619      	mov	r1, r3
 8001240:	483c      	ldr	r0, [pc, #240]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001242:	f002 f851 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <_ZL12MX_TIM2_Initv+0x92>
  {
    Error_Handler();
 8001256:	f000 fa7b 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800125a:	4836      	ldr	r0, [pc, #216]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 800125c:	f001 fd10 	bl	8002c80 <HAL_TIM_IC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8001270:	f000 fa6e 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	482c      	ldr	r0, [pc, #176]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001284:	f002 ff6c 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_ZL12MX_TIM2_Initv+0xd4>
  {
    Error_Handler();
 8001298:	f000 fa5a 	bl	8001750 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 80012b4:	f001 feb5 	bl	8003022 <HAL_TIM_IC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZL12MX_TIM2_Initv+0x104>
  {
    Error_Handler();
 80012c8:	f000 fa42 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	2204      	movs	r2, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 80012d4:	f001 fea5 	bl	8003022 <HAL_TIM_IC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <_ZL12MX_TIM2_Initv+0x124>
  {
    Error_Handler();
 80012e8:	f000 fa32 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2208      	movs	r2, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 80012f4:	f001 fe95 	bl	8003022 <HAL_TIM_IC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <_ZL12MX_TIM2_Initv+0x144>
  {
    Error_Handler();
 8001308:	f000 fa22 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	220c      	movs	r2, #12
 8001310:	4619      	mov	r1, r3
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <_ZL12MX_TIM2_Initv+0x16c>)
 8001314:	f001 fe85 	bl	8003022 <HAL_TIM_IC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <_ZL12MX_TIM2_Initv+0x164>
  {
    Error_Handler();
 8001328:	f000 fa12 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000c8 	.word	0x200000c8

08001338 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 800136a:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <_ZL12MX_TIM3_Initv+0x17c>)
 800136c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001370:	2230      	movs	r2, #48	; 0x30
 8001372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 22000;
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 800137c:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8001380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138e:	4848      	ldr	r0, [pc, #288]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001390:	f001 fbbe 	bl	8002b10 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf14      	ite	ne
 800139a:	2301      	movne	r3, #1
 800139c:	2300      	moveq	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80013a4:	f000 f9d4 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	483e      	ldr	r0, [pc, #248]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 80013b6:	f001 ff97 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80013ca:	f000 f9c1 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ce:	4838      	ldr	r0, [pc, #224]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 80013d0:	f001 fbd6 	bl	8002b80 <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf14      	ite	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	2300      	moveq	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80013e4:	f000 f9b4 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4619      	mov	r1, r3
 80013f6:	482e      	ldr	r0, [pc, #184]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 80013f8:	f002 feb2 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 800140c:	f000 f9a0 	bl	8001750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4822      	ldr	r0, [pc, #136]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001428:	f001 fe98 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf14      	ite	ne
 8001432:	2301      	movne	r3, #1
 8001434:	2300      	moveq	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 800143c:	f000 f988 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001448:	f001 fe88 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 800145c:	f000 f978 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2208      	movs	r2, #8
 8001464:	4619      	mov	r1, r3
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001468:	f001 fe78 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 800147c:	f000 f968 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	220c      	movs	r2, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 8001488:	f001 fe68 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 800149c:	f000 f958 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <_ZL12MX_TIM3_Initv+0x178>)
 80014a2:	f000 fa45 	bl	8001930 <HAL_TIM_MspPostInit>

}
 80014a6:	bf00      	nop
 80014a8:	3738      	adds	r7, #56	; 0x38
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000174 	.word	0x20000174
 80014b4:	40000400 	.word	0x40000400

080014b8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b092      	sub	sp, #72	; 0x48
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <_ZL12MX_TIM5_Initv+0x194>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48;
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b51      	ldr	r3, [pc, #324]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 22000;
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 800150a:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800150e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800151c:	484a      	ldr	r0, [pc, #296]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 800151e:	f001 faf7 	bl	8002b10 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf14      	ite	ne
 8001528:	2301      	movne	r3, #1
 800152a:	2300      	moveq	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <_ZL12MX_TIM5_Initv+0x7e>
  {
    Error_Handler();
 8001532:	f000 f90d 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001540:	4619      	mov	r1, r3
 8001542:	4841      	ldr	r0, [pc, #260]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001544:	f001 fed0 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_TIM5_Initv+0xa4>
  {
    Error_Handler();
 8001558:	f000 f8fa 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800155c:	483a      	ldr	r0, [pc, #232]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 800155e:	f001 fb8f 	bl	8002c80 <HAL_TIM_IC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_ZL12MX_TIM5_Initv+0xbe>
  {
    Error_Handler();
 8001572:	f000 f8ed 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001576:	4834      	ldr	r0, [pc, #208]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001578:	f001 fb02 	bl	8002b80 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 800158c:	f000 f8e0 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159c:	4619      	mov	r1, r3
 800159e:	482a      	ldr	r0, [pc, #168]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 80015a0:	f002 fdde 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZL12MX_TIM5_Initv+0x100>
  {
    Error_Handler();
 80015b4:	f000 f8cc 	bl	8001750 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015bc:	2301      	movs	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 80015d2:	f001 fd26 	bl	8003022 <HAL_TIM_IC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_ZL12MX_TIM5_Initv+0x132>
  {
    Error_Handler();
 80015e6:	f000 f8b3 	bl	8001750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ea:	2360      	movs	r3, #96	; 0x60
 80015ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2208      	movs	r2, #8
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001602:	f001 fdab 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_ZL12MX_TIM5_Initv+0x162>
  {
    Error_Handler();
 8001616:	f000 f89b 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	220c      	movs	r2, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 8001622:	f001 fd9b 	bl	800315c <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <_ZL12MX_TIM5_Initv+0x182>
  {
    Error_Handler();
 8001636:	f000 f88b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <_ZL12MX_TIM5_Initv+0x190>)
 800163c:	f000 f978 	bl	8001930 <HAL_TIM_MspPostInit>

}
 8001640:	bf00      	nop
 8001642:	3748      	adds	r7, #72	; 0x48
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000220 	.word	0x20000220
 800164c:	40000c00 	.word	0x40000c00

08001650 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001688:	f002 fe04 	bl	8004294 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800169c:	f000 f858 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200002cc 	.word	0x200002cc
 80016a8:	40004400 	.word	0x40004400

080016ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <_ZL12MX_GPIO_Initv+0x9c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <_ZL12MX_GPIO_Initv+0xa0>)
 800171e:	f000 fda1 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	4804      	ldr	r0, [pc, #16]	; (800174c <_ZL12MX_GPIO_Initv+0xa0>)
 800173c:	f000 fbf8 	bl	8001f30 <HAL_GPIO_Init>

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020c00 	.word	0x40020c00

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d153      	bne.n	800187a <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	4b51      	ldr	r3, [pc, #324]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b4e      	ldr	r3, [pc, #312]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a49      	ldr	r2, [pc, #292]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001826:	2322      	movs	r3, #34	; 0x22
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001836:	2301      	movs	r3, #1
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	4837      	ldr	r0, [pc, #220]	; (8001920 <HAL_TIM_Base_MspInit+0x170>)
 8001842:	f000 fb75 	bl	8001f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001846:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001858:	2301      	movs	r3, #1
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4830      	ldr	r0, [pc, #192]	; (8001924 <HAL_TIM_Base_MspInit+0x174>)
 8001864:	f000 fb64 	bl	8001f30 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	201c      	movs	r0, #28
 800186e:	f000 fb28 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001872:	201c      	movs	r0, #28
 8001874:	f000 fb41 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001878:	e04c      	b.n	8001914 <HAL_TIM_Base_MspInit+0x164>
  else if(htim_base->Instance==TIM3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_TIM_Base_MspInit+0x178>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d10e      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
}
 80018a0:	e038      	b.n	8001914 <HAL_TIM_Base_MspInit+0x164>
  else if(htim_base->Instance==TIM5)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_TIM_Base_MspInit+0x17c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d133      	bne.n	8001914 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_TIM_Base_MspInit+0x16c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e4:	2301      	movs	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018f4:	2302      	movs	r3, #2
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4808      	ldr	r0, [pc, #32]	; (8001920 <HAL_TIM_Base_MspInit+0x170>)
 8001900:	f000 fb16 	bl	8001f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2032      	movs	r0, #50	; 0x32
 800190a:	f000 fada 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800190e:	2032      	movs	r0, #50	; 0x32
 8001910:	f000 faf3 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	; 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40000400 	.word	0x40000400
 800192c:	40000c00 	.word	0x40000c00

08001930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <HAL_TIM_MspPostInit+0x10c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d13c      	bne.n	80019cc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a39      	ldr	r2, [pc, #228]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2302      	movs	r3, #2
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199a:	2302      	movs	r3, #2
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4827      	ldr	r0, [pc, #156]	; (8001a44 <HAL_TIM_MspPostInit+0x114>)
 80019a6:	f000 fac3 	bl	8001f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019aa:	2303      	movs	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4820      	ldr	r0, [pc, #128]	; (8001a48 <HAL_TIM_MspPostInit+0x118>)
 80019c6:	f000 fab3 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019ca:	e032      	b.n	8001a32 <HAL_TIM_MspPostInit+0x102>
  else if(htim->Instance==TIM5)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_TIM_MspPostInit+0x11c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12d      	bne.n	8001a32 <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_TIM_MspPostInit+0x110>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019f2:	2304      	movs	r3, #4
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a02:	2302      	movs	r3, #2
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <HAL_TIM_MspPostInit+0x114>)
 8001a0e:	f000 fa8f 	bl	8001f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a12:	2308      	movs	r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_TIM_MspPostInit+0x114>)
 8001a2e:	f000 fa7f 	bl	8001f30 <HAL_GPIO_Init>
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40000c00 	.word	0x40000c00

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12b      	bne.n	8001aca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001aaa:	2360      	movs	r3, #96	; 0x60
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_UART_MspInit+0x8c>)
 8001ac6:	f000 fa33 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020c00 	.word	0x40020c00

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f8a8 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f001 f947 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000c8 	.word	0x200000c8

08001b50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM5_IRQHandler+0x10>)
 8001b56:	f001 f93d 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000220 	.word	0x20000220

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <SystemInit+0x28>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <SystemInit+0x28>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SystemInit+0x28>)
 8001b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b96:	e003      	b.n	8001ba0 <LoopCopyDataInit>

08001b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9e:	3104      	adds	r1, #4

08001ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba8:	d3f6      	bcc.n	8001b98 <CopyDataInit>
  ldr  r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bac:	e002      	b.n	8001bb4 <LoopFillZerobss>

08001bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb0:	f842 3b04 	str.w	r3, [r2], #4

08001bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb8:	d3f9      	bcc.n	8001bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bba:	f7ff ffd3 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f002 ff33 	bl	8004a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff f8cf 	bl	8000d64 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bcc:	08004ac8 	.word	0x08004ac8
  ldr  r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bd8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bdc:	20000314 	.word	0x20000314

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f94d 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fda2 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f965 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92d 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000310 	.word	0x20000310

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000310 	.word	0x20000310

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_Delay+0x40>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000008 	.word	0x20000008

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e16b      	b.n	8002224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 815a 	bne.w	800221e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d00b      	beq.n	8001f8a <HAL_GPIO_Init+0x5a>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d007      	beq.n	8001f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f7e:	2b11      	cmp	r3, #17
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d130      	bne.n	8001fec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0xfc>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b12      	cmp	r3, #18
 800202a:	d123      	bne.n	8002074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80b4 	beq.w	800221e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <HAL_GPIO_Init+0x308>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a5e      	ldr	r2, [pc, #376]	; (8002238 <HAL_GPIO_Init+0x308>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_GPIO_Init+0x308>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_GPIO_Init+0x30c>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <HAL_GPIO_Init+0x310>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <HAL_GPIO_Init+0x226>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x314>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d025      	beq.n	8002152 <HAL_GPIO_Init+0x222>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x318>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <HAL_GPIO_Init+0x21e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_GPIO_Init+0x31c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x21a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_GPIO_Init+0x320>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x216>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x324>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x212>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_GPIO_Init+0x328>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x20e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4a      	ldr	r2, [pc, #296]	; (800225c <HAL_GPIO_Init+0x32c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x20a>
 8002136:	2307      	movs	r3, #7
 8002138:	e00e      	b.n	8002158 <HAL_GPIO_Init+0x228>
 800213a:	2308      	movs	r3, #8
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x228>
 800213e:	2306      	movs	r3, #6
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x228>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x228>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x228>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x228>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x228>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x228>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_GPIO_Init+0x30c>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_GPIO_Init+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219a:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_GPIO_Init+0x330>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x330>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_GPIO_Init+0x330>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_GPIO_Init+0x330>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_GPIO_Init+0x330>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x330>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_GPIO_Init+0x330>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae90 	bls.w	8001f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	3724      	adds	r7, #36	; 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40021c00 	.word	0x40021c00
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e25b      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b6:	4ba3      	ldr	r3, [pc, #652]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b99      	ldr	r3, [pc, #612]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e236      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a90      	ldr	r2, [pc, #576]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b8b      	ldr	r3, [pc, #556]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8a      	ldr	r2, [pc, #552]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a87      	ldr	r2, [pc, #540]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b84      	ldr	r3, [pc, #528]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a83      	ldr	r2, [pc, #524]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b81      	ldr	r3, [pc, #516]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a80      	ldr	r2, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fcae 	bl	8001cb0 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fcaa 	bl	8001cb0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1fb      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc9a 	bl	8001cb0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fc96 	bl	8001cb0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1e7      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b6c      	ldr	r3, [pc, #432]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1bb      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b56      	ldr	r3, [pc, #344]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4952      	ldr	r1, [pc, #328]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <HAL_RCC_OscConfig+0x2b0>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7ff fc4f 	bl	8001cb0 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff fc4b 	bl	8001cb0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e19c      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4940      	ldr	r1, [pc, #256]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_OscConfig+0x2b0>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff fc2e 	bl	8001cb0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002458:	f7ff fc2a 	bl	8001cb0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e17b      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d030      	beq.n	80024e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_RCC_OscConfig+0x2b4>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7ff fc0e 	bl	8001cb0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002498:	f7ff fc0a 	bl	8001cb0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e15b      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
 80024b6:	e015      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCC_OscConfig+0x2b4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fbf7 	bl	8001cb0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff fbf3 	bl	8001cb0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e144      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a0 	beq.w	8002632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x2b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d121      	bne.n	8002572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x2b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_RCC_OscConfig+0x2b8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7ff fbb9 	bl	8001cb0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e011      	b.n	8002566 <HAL_RCC_OscConfig+0x2ce>
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	42470000 	.word	0x42470000
 800254c:	42470e80 	.word	0x42470e80
 8002550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7ff fbac 	bl	8001cb0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0fd      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x2f0>
 800257a:	4b7d      	ldr	r3, [pc, #500]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a7c      	ldr	r2, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	e01c      	b.n	80025c2 <HAL_RCC_OscConfig+0x32a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x312>
 8002590:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a76      	ldr	r2, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a73      	ldr	r2, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	e00b      	b.n	80025c2 <HAL_RCC_OscConfig+0x32a>
 80025aa:	4b71      	ldr	r3, [pc, #452]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a70      	ldr	r2, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a6d      	ldr	r2, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d015      	beq.n	80025f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7ff fb71 	bl	8001cb0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fb6d 	bl	8001cb0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0bc      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ee      	beq.n	80025d2 <HAL_RCC_OscConfig+0x33a>
 80025f4:	e014      	b.n	8002620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb5b 	bl	8001cb0 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fb57 	bl	8001cb0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0a6      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b52      	ldr	r3, [pc, #328]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a51      	ldr	r2, [pc, #324]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8092 	beq.w	8002760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d05c      	beq.n	8002702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d141      	bne.n	80026d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b48      	ldr	r3, [pc, #288]	; (8002774 <HAL_RCC_OscConfig+0x4dc>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff fb2b 	bl	8001cb0 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7ff fb27 	bl	8001cb0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e078      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002670:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	019b      	lsls	r3, r3, #6
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	4933      	ldr	r1, [pc, #204]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a6:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x4dc>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fb00 	bl	8001cb0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff fafc 	bl	8001cb0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04d      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x41c>
 80026d2:	e045      	b.n	8002760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x4dc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff fae9 	bl	8001cb0 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff fae5 	bl	8001cb0 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e036      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x44a>
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e029      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	429a      	cmp	r2, r3
 8002720:	d11c      	bne.n	800275c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d115      	bne.n	800275c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273c:	4293      	cmp	r3, r2
 800273e:	d10d      	bne.n	800275c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000
 8002770:	40023800 	.word	0x40023800
 8002774:	42470060 	.word	0x42470060

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0cc      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b68      	ldr	r3, [pc, #416]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d90c      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d044      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d119      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e067      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7ff fa22 	bl	8001cb0 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7ff fa1e 	bl	8001cb0 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e04f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d20c      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4601      	mov	r1, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	fa21 f303 	lsr.w	r3, r1, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f982 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00
 8002934:	40023800 	.word	0x40023800
 8002938:	08004a98 	.word	0x08004a98
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295a:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d007      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x32>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d008      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x38>
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 808d 	bne.w	8002a8a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002972:	60bb      	str	r3, [r7, #8]
       break;
 8002974:	e08c      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002978:	60bb      	str	r3, [r7, #8]
      break;
 800297a:	e089      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297c:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002984:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002986:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d023      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	f04f 0400 	mov.w	r4, #0
 800299c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	ea03 0501 	and.w	r5, r3, r1
 80029a8:	ea04 0602 	and.w	r6, r4, r2
 80029ac:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ae:	fb02 f106 	mul.w	r1, r2, r6
 80029b2:	2200      	movs	r2, #0
 80029b4:	fb02 f205 	mul.w	r2, r2, r5
 80029b8:	440a      	add	r2, r1
 80029ba:	493a      	ldr	r1, [pc, #232]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029bc:	fba5 0101 	umull	r0, r1, r5, r1
 80029c0:	1853      	adds	r3, r2, r1
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4623      	mov	r3, r4
 80029ce:	f7fd fbfb 	bl	80001c8 <__aeabi_uldivmod>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e049      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	ea03 0501 	and.w	r5, r3, r1
 80029f0:	ea04 0602 	and.w	r6, r4, r2
 80029f4:	4629      	mov	r1, r5
 80029f6:	4632      	mov	r2, r6
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	0154      	lsls	r4, r2, #5
 8002a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a06:	014b      	lsls	r3, r1, #5
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	1b49      	subs	r1, r1, r5
 8002a0e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	0194      	lsls	r4, r2, #6
 8002a1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a20:	018b      	lsls	r3, r1, #6
 8002a22:	1a5b      	subs	r3, r3, r1
 8002a24:	eb64 0402 	sbc.w	r4, r4, r2
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	00e2      	lsls	r2, r4, #3
 8002a32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a36:	00d9      	lsls	r1, r3, #3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	195b      	adds	r3, r3, r5
 8002a3e:	eb44 0406 	adc.w	r4, r4, r6
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	02a2      	lsls	r2, r4, #10
 8002a4c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a50:	0299      	lsls	r1, r3, #10
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	4621      	mov	r1, r4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	f7fd fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	60bb      	str	r3, [r7, #8]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a8c:	60bb      	str	r3, [r7, #8]
      break;
 8002a8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a90:	68bb      	ldr	r3, [r7, #8]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	017d7840 	.word	0x017d7840

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4601      	mov	r1, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08004aa8 	.word	0x08004aa8

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4601      	mov	r1, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08004aa8 	.word	0x08004aa8

08002b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e028      	b.n	8002b74 <HAL_TIM_Base_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f001 fabc 	bl	80040b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_TIM_Base_Init+0x6c>)
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f000 fe6b 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	080017b1 	.word	0x080017b1

08002b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e028      	b.n	8002be4 <HAL_TIM_PWM_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 fa84 	bl	80040b4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_TIM_PWM_Init+0x6c>)
 8002bb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f000 fe33 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08002bf1 	.word	0x08002bf1

08002bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fa26 	bl	8004068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <HAL_TIM_PWM_Start+0x74>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_PWM_Start+0x2c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_TIM_PWM_Start+0x78>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x30>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_TIM_PWM_Start+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40010400 	.word	0x40010400

08002c80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e028      	b.n	8002ce4 <HAL_TIM_IC_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d111      	bne.n	8002cc2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 fa04 	bl	80040b4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_TIM_IC_Init+0x6c>)
 8002cb8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 fdb3 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	08002cf1 	.word	0x08002cf1

08002cf0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d841      	bhi.n	8002d98 <HAL_TIM_IC_Start_IT+0x94>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_TIM_IC_Start_IT+0x18>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d99 	.word	0x08002d99
 8002d24:	08002d99 	.word	0x08002d99
 8002d28:	08002d99 	.word	0x08002d99
 8002d2c:	08002d63 	.word	0x08002d63
 8002d30:	08002d99 	.word	0x08002d99
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002d99 	.word	0x08002d99
 8002d3c:	08002d75 	.word	0x08002d75
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002d99 	.word	0x08002d99
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002d87 	.word	0x08002d87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0202 	orr.w	r2, r2, #2
 8002d5e:	60da      	str	r2, [r3, #12]
      break;
 8002d60:	e01b      	b.n	8002d9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0204 	orr.w	r2, r2, #4
 8002d70:	60da      	str	r2, [r3, #12]
      break;
 8002d72:	e012      	b.n	8002d9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	60da      	str	r2, [r3, #12]
      break;
 8002d84:	e009      	b.n	8002d9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0210 	orr.w	r2, r2, #16
 8002d94:	60da      	str	r2, [r3, #12]
      break;
 8002d96:	e000      	b.n	8002d9a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002d98:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f960 	bl	8004068 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d128      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d121      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0202 	mvn.w	r2, #2
 8002e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e009      	b.n	8002e36 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d128      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d121      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0204 	mvn.w	r2, #4
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e009      	b.n	8002e96 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d128      	bne.n	8002efc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d121      	bne.n	8002efc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0208 	mvn.w	r2, #8
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e009      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d128      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d121      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e009      	b.n	8002f56 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10f      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d110      	bne.n	8002fba <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d110      	bne.n	8002fea <HAL_TIM_IRQHandler+0x216>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d109      	bne.n	8002fea <HAL_TIM_IRQHandler+0x216>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d110      	bne.n	800301a <HAL_TIM_IRQHandler+0x246>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d109      	bne.n	800301a <HAL_TIM_IRQHandler+0x246>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0220 	mvn.w	r2, #32
 800300e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003038:	2302      	movs	r3, #2
 800303a:	e08a      	b.n	8003152 <HAL_TIM_IC_ConfigChannel+0x130>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11b      	bne.n	800308a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f000 fe3d 	bl	8003ce0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 020c 	bic.w	r2, r2, #12
 8003074:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6999      	ldr	r1, [r3, #24]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	619a      	str	r2, [r3, #24]
 8003088:	e05a      	b.n	8003140 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11c      	bne.n	80030ca <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f000 fec1 	bl	8003e26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6999      	ldr	r1, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	021a      	lsls	r2, r3, #8
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	619a      	str	r2, [r3, #24]
 80030c8:	e03a      	b.n	8003140 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f000 ff0e 	bl	8003f00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020c 	bic.w	r2, r2, #12
 80030f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69d9      	ldr	r1, [r3, #28]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	e01b      	b.n	8003140 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f000 ff2e 	bl	8003f78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800312a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69d9      	ldr	r1, [r3, #28]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	021a      	lsls	r2, r3, #8
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003172:	2302      	movs	r3, #2
 8003174:	e0b4      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	f200 809f 	bhi.w	80032cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031c9 	.word	0x080031c9
 8003198:	080032cd 	.word	0x080032cd
 800319c:	080032cd 	.word	0x080032cd
 80031a0:	080032cd 	.word	0x080032cd
 80031a4:	08003209 	.word	0x08003209
 80031a8:	080032cd 	.word	0x080032cd
 80031ac:	080032cd 	.word	0x080032cd
 80031b0:	080032cd 	.word	0x080032cd
 80031b4:	0800324b 	.word	0x0800324b
 80031b8:	080032cd 	.word	0x080032cd
 80031bc:	080032cd 	.word	0x080032cd
 80031c0:	080032cd 	.word	0x080032cd
 80031c4:	0800328b 	.word	0x0800328b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fbd6 	bl	8003980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
      break;
 8003206:	e062      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc26 	bl	8003a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	619a      	str	r2, [r3, #24]
      break;
 8003248:	e041      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fc7b 	bl	8003b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0208 	orr.w	r2, r2, #8
 8003264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0204 	bic.w	r2, r2, #4
 8003274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69d9      	ldr	r1, [r3, #28]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	61da      	str	r2, [r3, #28]
      break;
 8003288:	e021      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fccf 	bl	8003c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	021a      	lsls	r2, r3, #8
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	61da      	str	r2, [r3, #28]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80032cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIM_ConfigClockSource+0x18>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0a6      	b.n	800344e <HAL_TIM_ConfigClockSource+0x166>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d067      	beq.n	8003408 <HAL_TIM_ConfigClockSource+0x120>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d80b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x6c>
 800333c:	2b10      	cmp	r3, #16
 800333e:	d073      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x140>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d802      	bhi.n	800334a <HAL_TIM_ConfigClockSource+0x62>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d06f      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003348:	e078      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800334a:	2b20      	cmp	r3, #32
 800334c:	d06c      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x140>
 800334e:	2b30      	cmp	r3, #48	; 0x30
 8003350:	d06a      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003352:	e073      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d00d      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x8c>
 8003358:	2b70      	cmp	r3, #112	; 0x70
 800335a:	d804      	bhi.n	8003366 <HAL_TIM_ConfigClockSource+0x7e>
 800335c:	2b50      	cmp	r3, #80	; 0x50
 800335e:	d033      	beq.n	80033c8 <HAL_TIM_ConfigClockSource+0xe0>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d041      	beq.n	80033e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003364:	e06a      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d066      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x152>
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003370:	d017      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003372:	e063      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f000 fe50 	bl	8004028 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003396:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]
      break;
 80033a0:	e04c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f000 fe39 	bl	8004028 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c4:	609a      	str	r2, [r3, #8]
      break;
 80033c6:	e039      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	461a      	mov	r2, r3
 80033d6:	f000 fcf7 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2150      	movs	r1, #80	; 0x50
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fe06 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 80033e6:	e029      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f000 fd53 	bl	8003ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2160      	movs	r1, #96	; 0x60
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fdf6 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003406:	e019      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	461a      	mov	r2, r3
 8003416:	f000 fcd7 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2140      	movs	r1, #64	; 0x40
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fde6 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003426:	e009      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 fddd 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003438:	e000      	b.n	800343c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800343a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d831      	bhi.n	80034d0 <HAL_TIM_ReadCapturedValue+0x78>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <HAL_TIM_ReadCapturedValue+0x1c>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034d1 	.word	0x080034d1
 800347c:	080034d1 	.word	0x080034d1
 8003480:	080034d1 	.word	0x080034d1
 8003484:	080034b3 	.word	0x080034b3
 8003488:	080034d1 	.word	0x080034d1
 800348c:	080034d1 	.word	0x080034d1
 8003490:	080034d1 	.word	0x080034d1
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034c7 	.word	0x080034c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	60fb      	str	r3, [r7, #12]

      break;
 80034b0:	e00f      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	60fb      	str	r3, [r7, #12]

      break;
 80034ba:	e00a      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	60fb      	str	r3, [r7, #12]

      break;
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	60fb      	str	r3, [r7, #12]

      break;
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034d0:	bf00      	nop
  }

  return tmpreg;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	460b      	mov	r3, r1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e136      	b.n	8003832 <HAL_TIM_RegisterCallback+0x28a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_RegisterCallback+0x2a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e12f      	b.n	8003832 <HAL_TIM_RegisterCallback+0x28a>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 80b9 	bne.w	800375a <HAL_TIM_RegisterCallback+0x1b2>
  {
    switch (CallbackID)
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	2b1a      	cmp	r3, #26
 80035ec:	f200 80b1 	bhi.w	8003752 <HAL_TIM_RegisterCallback+0x1aa>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_TIM_RegisterCallback+0x50>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003665 	.word	0x08003665
 80035fc:	0800366d 	.word	0x0800366d
 8003600:	08003675 	.word	0x08003675
 8003604:	0800367d 	.word	0x0800367d
 8003608:	08003685 	.word	0x08003685
 800360c:	0800368d 	.word	0x0800368d
 8003610:	08003695 	.word	0x08003695
 8003614:	0800369d 	.word	0x0800369d
 8003618:	080036a5 	.word	0x080036a5
 800361c:	080036ad 	.word	0x080036ad
 8003620:	080036b5 	.word	0x080036b5
 8003624:	080036bd 	.word	0x080036bd
 8003628:	080036c5 	.word	0x080036c5
 800362c:	080036cd 	.word	0x080036cd
 8003630:	080036d5 	.word	0x080036d5
 8003634:	080036dd 	.word	0x080036dd
 8003638:	080036e5 	.word	0x080036e5
 800363c:	080036ef 	.word	0x080036ef
 8003640:	080036f9 	.word	0x080036f9
 8003644:	08003703 	.word	0x08003703
 8003648:	0800370d 	.word	0x0800370d
 800364c:	08003717 	.word	0x08003717
 8003650:	08003721 	.word	0x08003721
 8003654:	0800372b 	.word	0x0800372b
 8003658:	08003735 	.word	0x08003735
 800365c:	0800373f 	.word	0x0800373f
 8003660:	08003749 	.word	0x08003749
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800366a:	e0dd      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8003672:	e0d9      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800367a:	e0d5      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003682:	e0d1      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800368a:	e0cd      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003692:	e0c9      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800369a:	e0c5      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80036a2:	e0c1      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80036aa:	e0bd      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80036b2:	e0b9      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80036ba:	e0b5      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80036c2:	e0b1      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80036ca:	e0ad      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80036d2:	e0a9      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80036da:	e0a5      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80036e2:	e0a1      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80036ec:	e09c      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80036f6:	e097      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003700:	e092      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800370a:	e08d      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003714:	e088      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800371e:	e083      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003728:	e07e      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003732:	e079      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800373c:	e074      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003746:	e06f      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003750:	e06a      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
        break;
 8003756:	bf00      	nop
 8003758:	e066      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d15e      	bne.n	8003824 <HAL_TIM_RegisterCallback+0x27c>
  {
    switch (CallbackID)
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	2b0d      	cmp	r3, #13
 800376a:	d857      	bhi.n	800381c <HAL_TIM_RegisterCallback+0x274>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <HAL_TIM_RegisterCallback+0x1cc>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	080037ad 	.word	0x080037ad
 8003778:	080037b5 	.word	0x080037b5
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037c5 	.word	0x080037c5
 8003784:	080037cd 	.word	0x080037cd
 8003788:	080037d5 	.word	0x080037d5
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080037e5 	.word	0x080037e5
 8003794:	080037ed 	.word	0x080037ed
 8003798:	080037f5 	.word	0x080037f5
 800379c:	080037fd 	.word	0x080037fd
 80037a0:	08003805 	.word	0x08003805
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003815 	.word	0x08003815
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80037b2:	e039      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80037ba:	e035      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80037c2:	e031      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80037ca:	e02d      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80037d2:	e029      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80037da:	e025      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80037e2:	e021      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80037ea:	e01d      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80037f2:	e019      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80037fa:	e015      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003802:	e011      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800380a:	e00d      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003812:	e009      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800381a:	e005      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
        break;
 8003820:	bf00      	nop
 8003822:	e001      	b.n	8003828 <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <TIM_Base_SetConfig+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d00f      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3d      	ldr	r2, [pc, #244]	; (8003958 <TIM_Base_SetConfig+0x118>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3c      	ldr	r2, [pc, #240]	; (800395c <TIM_Base_SetConfig+0x11c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <TIM_Base_SetConfig+0x120>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3a      	ldr	r2, [pc, #232]	; (8003964 <TIM_Base_SetConfig+0x124>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d108      	bne.n	8003892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <TIM_Base_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d027      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <TIM_Base_SetConfig+0x118>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d023      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	; (800395c <TIM_Base_SetConfig+0x11c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <TIM_Base_SetConfig+0x120>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a29      	ldr	r2, [pc, #164]	; (8003964 <TIM_Base_SetConfig+0x124>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <TIM_Base_SetConfig+0x128>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a27      	ldr	r2, [pc, #156]	; (800396c <TIM_Base_SetConfig+0x12c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a26      	ldr	r2, [pc, #152]	; (8003970 <TIM_Base_SetConfig+0x130>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a25      	ldr	r2, [pc, #148]	; (8003974 <TIM_Base_SetConfig+0x134>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a24      	ldr	r2, [pc, #144]	; (8003978 <TIM_Base_SetConfig+0x138>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <TIM_Base_SetConfig+0x13c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <TIM_Base_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0xf8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <TIM_Base_SetConfig+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d103      	bne.n	8003940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	615a      	str	r2, [r3, #20]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40010400 	.word	0x40010400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800
 8003974:	40001800 	.word	0x40001800
 8003978:	40001c00 	.word	0x40001c00
 800397c:	40002000 	.word	0x40002000

08003980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 0302 	bic.w	r3, r3, #2
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a20      	ldr	r2, [pc, #128]	; (8003a58 <TIM_OC1_SetConfig+0xd8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC1_SetConfig+0x64>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <TIM_OC1_SetConfig+0xdc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10c      	bne.n	80039fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0308 	bic.w	r3, r3, #8
 80039ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <TIM_OC1_SetConfig+0xd8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC1_SetConfig+0x8e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC1_SetConfig+0xdc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d111      	bne.n	8003a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40010400 	.word	0x40010400

08003a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_OC2_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_OC2_SetConfig+0x68>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <TIM_OC2_SetConfig+0xe8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10d      	bne.n	8003ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <TIM_OC2_SetConfig+0xe4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC2_SetConfig+0x94>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <TIM_OC2_SetConfig+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d113      	bne.n	8003b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40010400 	.word	0x40010400

08003b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <TIM_OC3_SetConfig+0xe0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_OC3_SetConfig+0x66>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <TIM_OC3_SetConfig+0xe4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10d      	bne.n	8003bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_OC3_SetConfig+0xe0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_OC3_SetConfig+0x92>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <TIM_OC3_SetConfig+0xe4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d113      	bne.n	8003c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40010400 	.word	0x40010400

08003c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <TIM_OC4_SetConfig+0xa4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC4_SetConfig+0x68>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <TIM_OC4_SetConfig+0xa8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <TIM_TI1_SetConfig+0xcc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01b      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d017      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <TIM_TI1_SetConfig+0xd0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <TIM_TI1_SetConfig+0xd4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <TIM_TI1_SetConfig+0xd8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <TIM_TI1_SetConfig+0xdc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <TIM_TI1_SetConfig+0xe0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_TI1_SetConfig+0x66>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <TIM_TI1_SetConfig+0xe4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <TIM_TI1_SetConfig+0x6a>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <TIM_TI1_SetConfig+0x6c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e003      	b.n	8003d6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f023 030a 	bic.w	r3, r3, #10
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 030a 	and.w	r3, r3, #10
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40010400 	.word	0x40010400
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40001800 	.word	0x40001800

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 030a 	bic.w	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	031b      	lsls	r3, r3, #12
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0303 	bic.w	r3, r3, #3
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	031b      	lsls	r3, r3, #12
 8003fd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	f043 0307 	orr.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	431a      	orrs	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2201      	movs	r2, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	43db      	mvns	r3, r3
 800408a:	401a      	ands	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1a      	ldr	r2, [r3, #32]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1b      	ldr	r2, [pc, #108]	; (800412c <TIM_ResetCallback+0x78>)
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <TIM_ResetCallback+0x7c>)
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <TIM_ResetCallback+0x80>)
 80040cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a19      	ldr	r2, [pc, #100]	; (8004138 <TIM_ResetCallback+0x84>)
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <TIM_ResetCallback+0x88>)
 80040dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <TIM_ResetCallback+0x8c>)
 80040e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <TIM_ResetCallback+0x90>)
 80040ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_ResetCallback+0x94>)
 80040f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_ResetCallback+0x98>)
 80040fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_ResetCallback+0x9c>)
 8004104:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <TIM_ResetCallback+0xa0>)
 800410c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a11      	ldr	r2, [pc, #68]	; (8004158 <TIM_ResetCallback+0xa4>)
 8004114:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <TIM_ResetCallback+0xa8>)
 800411c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	080034e1 	.word	0x080034e1
 8004130:	080034f5 	.word	0x080034f5
 8004134:	0800356d 	.word	0x0800356d
 8004138:	08003581 	.word	0x08003581
 800413c:	0800351d 	.word	0x0800351d
 8004140:	08003531 	.word	0x08003531
 8004144:	08003509 	.word	0x08003509
 8004148:	08003545 	.word	0x08003545
 800414c:	08003559 	.word	0x08003559
 8004150:	08003595 	.word	0x08003595
 8004154:	08004259 	.word	0x08004259
 8004158:	0800426d 	.word	0x0800426d
 800415c:	08004281 	.word	0x08004281

08004160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004174:	2302      	movs	r3, #2
 8004176:	e05a      	b.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d01d      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a17      	ldr	r2, [pc, #92]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10c      	bne.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4313      	orrs	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40010000 	.word	0x40010000
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40010400 	.word	0x40010400
 8004250:	40014000 	.word	0x40014000
 8004254:	40001800 	.word	0x40001800

08004258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e03f      	b.n	8004326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fbc8 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f829 	bl	8004330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004372:	f023 030c 	bic.w	r3, r3, #12
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	430b      	orrs	r3, r1
 800437e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	f040 818b 	bne.w	80046b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4ac1      	ldr	r2, [pc, #772]	; (80046ac <UART_SetConfig+0x37c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d005      	beq.n	80043b8 <UART_SetConfig+0x88>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4abf      	ldr	r2, [pc, #764]	; (80046b0 <UART_SetConfig+0x380>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f040 80bd 	bne.w	8004532 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fb96 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 80043bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	461d      	mov	r5, r3
 80043c2:	f04f 0600 	mov.w	r6, #0
 80043c6:	46a8      	mov	r8, r5
 80043c8:	46b1      	mov	r9, r6
 80043ca:	eb18 0308 	adds.w	r3, r8, r8
 80043ce:	eb49 0409 	adc.w	r4, r9, r9
 80043d2:	4698      	mov	r8, r3
 80043d4:	46a1      	mov	r9, r4
 80043d6:	eb18 0805 	adds.w	r8, r8, r5
 80043da:	eb49 0906 	adc.w	r9, r9, r6
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f2:	4688      	mov	r8, r1
 80043f4:	4691      	mov	r9, r2
 80043f6:	eb18 0005 	adds.w	r0, r8, r5
 80043fa:	eb49 0106 	adc.w	r1, r9, r6
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	461d      	mov	r5, r3
 8004404:	f04f 0600 	mov.w	r6, #0
 8004408:	196b      	adds	r3, r5, r5
 800440a:	eb46 0406 	adc.w	r4, r6, r6
 800440e:	461a      	mov	r2, r3
 8004410:	4623      	mov	r3, r4
 8004412:	f7fb fed9 	bl	80001c8 <__aeabi_uldivmod>
 8004416:	4603      	mov	r3, r0
 8004418:	460c      	mov	r4, r1
 800441a:	461a      	mov	r2, r3
 800441c:	4ba5      	ldr	r3, [pc, #660]	; (80046b4 <UART_SetConfig+0x384>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	461d      	mov	r5, r3
 800442c:	f04f 0600 	mov.w	r6, #0
 8004430:	46a9      	mov	r9, r5
 8004432:	46b2      	mov	sl, r6
 8004434:	eb19 0309 	adds.w	r3, r9, r9
 8004438:	eb4a 040a 	adc.w	r4, sl, sl
 800443c:	4699      	mov	r9, r3
 800443e:	46a2      	mov	sl, r4
 8004440:	eb19 0905 	adds.w	r9, r9, r5
 8004444:	eb4a 0a06 	adc.w	sl, sl, r6
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800445c:	4689      	mov	r9, r1
 800445e:	4692      	mov	sl, r2
 8004460:	eb19 0005 	adds.w	r0, r9, r5
 8004464:	eb4a 0106 	adc.w	r1, sl, r6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	461d      	mov	r5, r3
 800446e:	f04f 0600 	mov.w	r6, #0
 8004472:	196b      	adds	r3, r5, r5
 8004474:	eb46 0406 	adc.w	r4, r6, r6
 8004478:	461a      	mov	r2, r3
 800447a:	4623      	mov	r3, r4
 800447c:	f7fb fea4 	bl	80001c8 <__aeabi_uldivmod>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	461a      	mov	r2, r3
 8004486:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <UART_SetConfig+0x384>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	; 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3332      	adds	r3, #50	; 0x32
 800449a:	4a86      	ldr	r2, [pc, #536]	; (80046b4 <UART_SetConfig+0x384>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044a8:	4498      	add	r8, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	461d      	mov	r5, r3
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	46a9      	mov	r9, r5
 80044b4:	46b2      	mov	sl, r6
 80044b6:	eb19 0309 	adds.w	r3, r9, r9
 80044ba:	eb4a 040a 	adc.w	r4, sl, sl
 80044be:	4699      	mov	r9, r3
 80044c0:	46a2      	mov	sl, r4
 80044c2:	eb19 0905 	adds.w	r9, r9, r5
 80044c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044de:	4689      	mov	r9, r1
 80044e0:	4692      	mov	sl, r2
 80044e2:	eb19 0005 	adds.w	r0, r9, r5
 80044e6:	eb4a 0106 	adc.w	r1, sl, r6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	461d      	mov	r5, r3
 80044f0:	f04f 0600 	mov.w	r6, #0
 80044f4:	196b      	adds	r3, r5, r5
 80044f6:	eb46 0406 	adc.w	r4, r6, r6
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fb fe63 	bl	80001c8 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	461a      	mov	r2, r3
 8004508:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <UART_SetConfig+0x384>)
 800450a:	fba3 1302 	umull	r1, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2164      	movs	r1, #100	; 0x64
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	3332      	adds	r3, #50	; 0x32
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <UART_SetConfig+0x384>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f003 0207 	and.w	r2, r3, #7
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4442      	add	r2, r8
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	e26f      	b.n	8004a12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004532:	f7fe fac5 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8004536:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	461d      	mov	r5, r3
 800453c:	f04f 0600 	mov.w	r6, #0
 8004540:	46a8      	mov	r8, r5
 8004542:	46b1      	mov	r9, r6
 8004544:	eb18 0308 	adds.w	r3, r8, r8
 8004548:	eb49 0409 	adc.w	r4, r9, r9
 800454c:	4698      	mov	r8, r3
 800454e:	46a1      	mov	r9, r4
 8004550:	eb18 0805 	adds.w	r8, r8, r5
 8004554:	eb49 0906 	adc.w	r9, r9, r6
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004564:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004568:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800456c:	4688      	mov	r8, r1
 800456e:	4691      	mov	r9, r2
 8004570:	eb18 0005 	adds.w	r0, r8, r5
 8004574:	eb49 0106 	adc.w	r1, r9, r6
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	461d      	mov	r5, r3
 800457e:	f04f 0600 	mov.w	r6, #0
 8004582:	196b      	adds	r3, r5, r5
 8004584:	eb46 0406 	adc.w	r4, r6, r6
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	f7fb fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	461a      	mov	r2, r3
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <UART_SetConfig+0x384>)
 8004598:	fba3 2302 	umull	r2, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	461d      	mov	r5, r3
 80045a6:	f04f 0600 	mov.w	r6, #0
 80045aa:	46a9      	mov	r9, r5
 80045ac:	46b2      	mov	sl, r6
 80045ae:	eb19 0309 	adds.w	r3, r9, r9
 80045b2:	eb4a 040a 	adc.w	r4, sl, sl
 80045b6:	4699      	mov	r9, r3
 80045b8:	46a2      	mov	sl, r4
 80045ba:	eb19 0905 	adds.w	r9, r9, r5
 80045be:	eb4a 0a06 	adc.w	sl, sl, r6
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d6:	4689      	mov	r9, r1
 80045d8:	4692      	mov	sl, r2
 80045da:	eb19 0005 	adds.w	r0, r9, r5
 80045de:	eb4a 0106 	adc.w	r1, sl, r6
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	461d      	mov	r5, r3
 80045e8:	f04f 0600 	mov.w	r6, #0
 80045ec:	196b      	adds	r3, r5, r5
 80045ee:	eb46 0406 	adc.w	r4, r6, r6
 80045f2:	461a      	mov	r2, r3
 80045f4:	4623      	mov	r3, r4
 80045f6:	f7fb fde7 	bl	80001c8 <__aeabi_uldivmod>
 80045fa:	4603      	mov	r3, r0
 80045fc:	460c      	mov	r4, r1
 80045fe:	461a      	mov	r2, r3
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <UART_SetConfig+0x384>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <UART_SetConfig+0x384>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004622:	4498      	add	r8, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	461d      	mov	r5, r3
 8004628:	f04f 0600 	mov.w	r6, #0
 800462c:	46a9      	mov	r9, r5
 800462e:	46b2      	mov	sl, r6
 8004630:	eb19 0309 	adds.w	r3, r9, r9
 8004634:	eb4a 040a 	adc.w	r4, sl, sl
 8004638:	4699      	mov	r9, r3
 800463a:	46a2      	mov	sl, r4
 800463c:	eb19 0905 	adds.w	r9, r9, r5
 8004640:	eb4a 0a06 	adc.w	sl, sl, r6
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004658:	4689      	mov	r9, r1
 800465a:	4692      	mov	sl, r2
 800465c:	eb19 0005 	adds.w	r0, r9, r5
 8004660:	eb4a 0106 	adc.w	r1, sl, r6
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	461d      	mov	r5, r3
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	196b      	adds	r3, r5, r5
 8004670:	eb46 0406 	adc.w	r4, r6, r6
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	f7fb fda6 	bl	80001c8 <__aeabi_uldivmod>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	461a      	mov	r2, r3
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <UART_SetConfig+0x384>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <UART_SetConfig+0x384>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4442      	add	r2, r8
 80046a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80046aa:	e1b2      	b.n	8004a12 <UART_SetConfig+0x6e2>
 80046ac:	40011000 	.word	0x40011000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4ad7      	ldr	r2, [pc, #860]	; (8004a1c <UART_SetConfig+0x6ec>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d005      	beq.n	80046ce <UART_SetConfig+0x39e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4ad6      	ldr	r2, [pc, #856]	; (8004a20 <UART_SetConfig+0x6f0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f040 80d1 	bne.w	8004870 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ce:	f7fe fa0b 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 80046d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	469a      	mov	sl, r3
 80046d8:	f04f 0b00 	mov.w	fp, #0
 80046dc:	46d0      	mov	r8, sl
 80046de:	46d9      	mov	r9, fp
 80046e0:	eb18 0308 	adds.w	r3, r8, r8
 80046e4:	eb49 0409 	adc.w	r4, r9, r9
 80046e8:	4698      	mov	r8, r3
 80046ea:	46a1      	mov	r9, r4
 80046ec:	eb18 080a 	adds.w	r8, r8, sl
 80046f0:	eb49 090b 	adc.w	r9, r9, fp
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004700:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004704:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004708:	4688      	mov	r8, r1
 800470a:	4691      	mov	r9, r2
 800470c:	eb1a 0508 	adds.w	r5, sl, r8
 8004710:	eb4b 0609 	adc.w	r6, fp, r9
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0094      	lsls	r4, r2, #2
 8004728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	461a      	mov	r2, r3
 8004730:	4623      	mov	r3, r4
 8004732:	4628      	mov	r0, r5
 8004734:	4631      	mov	r1, r6
 8004736:	f7fb fd47 	bl	80001c8 <__aeabi_uldivmod>
 800473a:	4603      	mov	r3, r0
 800473c:	460c      	mov	r4, r1
 800473e:	461a      	mov	r2, r3
 8004740:	4bb8      	ldr	r3, [pc, #736]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004742:	fba3 2302 	umull	r2, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	469b      	mov	fp, r3
 8004750:	f04f 0c00 	mov.w	ip, #0
 8004754:	46d9      	mov	r9, fp
 8004756:	46e2      	mov	sl, ip
 8004758:	eb19 0309 	adds.w	r3, r9, r9
 800475c:	eb4a 040a 	adc.w	r4, sl, sl
 8004760:	4699      	mov	r9, r3
 8004762:	46a2      	mov	sl, r4
 8004764:	eb19 090b 	adds.w	r9, r9, fp
 8004768:	eb4a 0a0c 	adc.w	sl, sl, ip
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800477c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004780:	4689      	mov	r9, r1
 8004782:	4692      	mov	sl, r2
 8004784:	eb1b 0509 	adds.w	r5, fp, r9
 8004788:	eb4c 060a 	adc.w	r6, ip, sl
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	f04f 0400 	mov.w	r4, #0
 800479e:	0094      	lsls	r4, r2, #2
 80047a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047a4:	008b      	lsls	r3, r1, #2
 80047a6:	461a      	mov	r2, r3
 80047a8:	4623      	mov	r3, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	4631      	mov	r1, r6
 80047ae:	f7fb fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80047b2:	4603      	mov	r3, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b9a      	ldr	r3, [pc, #616]	; (8004a24 <UART_SetConfig+0x6f4>)
 80047ba:	fba3 1302 	umull	r1, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	; 0x32
 80047cc:	4a95      	ldr	r2, [pc, #596]	; (8004a24 <UART_SetConfig+0x6f4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d8:	4498      	add	r8, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	469b      	mov	fp, r3
 80047de:	f04f 0c00 	mov.w	ip, #0
 80047e2:	46d9      	mov	r9, fp
 80047e4:	46e2      	mov	sl, ip
 80047e6:	eb19 0309 	adds.w	r3, r9, r9
 80047ea:	eb4a 040a 	adc.w	r4, sl, sl
 80047ee:	4699      	mov	r9, r3
 80047f0:	46a2      	mov	sl, r4
 80047f2:	eb19 090b 	adds.w	r9, r9, fp
 80047f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800480a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800480e:	4689      	mov	r9, r1
 8004810:	4692      	mov	sl, r2
 8004812:	eb1b 0509 	adds.w	r5, fp, r9
 8004816:	eb4c 060a 	adc.w	r6, ip, sl
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4619      	mov	r1, r3
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	0094      	lsls	r4, r2, #2
 800482e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	4628      	mov	r0, r5
 800483a:	4631      	mov	r1, r6
 800483c:	f7fb fcc4 	bl	80001c8 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b77      	ldr	r3, [pc, #476]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <UART_SetConfig+0x6f4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 020f 	and.w	r2, r3, #15
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4442      	add	r2, r8
 800486c:	609a      	str	r2, [r3, #8]
 800486e:	e0d0      	b.n	8004a12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe f926 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8004874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	469a      	mov	sl, r3
 800487a:	f04f 0b00 	mov.w	fp, #0
 800487e:	46d0      	mov	r8, sl
 8004880:	46d9      	mov	r9, fp
 8004882:	eb18 0308 	adds.w	r3, r8, r8
 8004886:	eb49 0409 	adc.w	r4, r9, r9
 800488a:	4698      	mov	r8, r3
 800488c:	46a1      	mov	r9, r4
 800488e:	eb18 080a 	adds.w	r8, r8, sl
 8004892:	eb49 090b 	adc.w	r9, r9, fp
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048aa:	4688      	mov	r8, r1
 80048ac:	4691      	mov	r9, r2
 80048ae:	eb1a 0508 	adds.w	r5, sl, r8
 80048b2:	eb4b 0609 	adc.w	r6, fp, r9
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	0094      	lsls	r4, r2, #2
 80048ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ce:	008b      	lsls	r3, r1, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	4631      	mov	r1, r6
 80048d8:	f7fb fc76 	bl	80001c8 <__aeabi_uldivmod>
 80048dc:	4603      	mov	r3, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <UART_SetConfig+0x6f4>)
 80048e4:	fba3 2302 	umull	r2, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	469b      	mov	fp, r3
 80048f2:	f04f 0c00 	mov.w	ip, #0
 80048f6:	46d9      	mov	r9, fp
 80048f8:	46e2      	mov	sl, ip
 80048fa:	eb19 0309 	adds.w	r3, r9, r9
 80048fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004902:	4699      	mov	r9, r3
 8004904:	46a2      	mov	sl, r4
 8004906:	eb19 090b 	adds.w	r9, r9, fp
 800490a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800491a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800491e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004922:	4689      	mov	r9, r1
 8004924:	4692      	mov	sl, r2
 8004926:	eb1b 0509 	adds.w	r5, fp, r9
 800492a:	eb4c 060a 	adc.w	r6, ip, sl
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4619      	mov	r1, r3
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f04f 0400 	mov.w	r4, #0
 8004940:	0094      	lsls	r4, r2, #2
 8004942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	461a      	mov	r2, r3
 800494a:	4623      	mov	r3, r4
 800494c:	4628      	mov	r0, r5
 800494e:	4631      	mov	r1, r6
 8004950:	f7fb fc3a 	bl	80001c8 <__aeabi_uldivmod>
 8004954:	4603      	mov	r3, r0
 8004956:	460c      	mov	r4, r1
 8004958:	461a      	mov	r2, r3
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <UART_SetConfig+0x6f4>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	3332      	adds	r3, #50	; 0x32
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497a:	4498      	add	r8, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	469b      	mov	fp, r3
 8004980:	f04f 0c00 	mov.w	ip, #0
 8004984:	46d9      	mov	r9, fp
 8004986:	46e2      	mov	sl, ip
 8004988:	eb19 0309 	adds.w	r3, r9, r9
 800498c:	eb4a 040a 	adc.w	r4, sl, sl
 8004990:	4699      	mov	r9, r3
 8004992:	46a2      	mov	sl, r4
 8004994:	eb19 090b 	adds.w	r9, r9, fp
 8004998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049b0:	4689      	mov	r9, r1
 80049b2:	4692      	mov	sl, r2
 80049b4:	eb1b 0509 	adds.w	r5, fp, r9
 80049b8:	eb4c 060a 	adc.w	r6, ip, sl
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4619      	mov	r1, r3
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	f04f 0400 	mov.w	r4, #0
 80049ce:	0094      	lsls	r4, r2, #2
 80049d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049d4:	008b      	lsls	r3, r1, #2
 80049d6:	461a      	mov	r2, r3
 80049d8:	4623      	mov	r3, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	4631      	mov	r1, r6
 80049de:	f7fb fbf3 	bl	80001c8 <__aeabi_uldivmod>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <UART_SetConfig+0x6f4>)
 80049ea:	fba3 1302 	umull	r1, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2164      	movs	r1, #100	; 0x64
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <UART_SetConfig+0x6f4>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4442      	add	r2, r8
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	e7ff      	b.n	8004a12 <UART_SetConfig+0x6e2>
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <__libc_init_array>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4e0d      	ldr	r6, [pc, #52]	; (8004a60 <__libc_init_array+0x38>)
 8004a2c:	4c0d      	ldr	r4, [pc, #52]	; (8004a64 <__libc_init_array+0x3c>)
 8004a2e:	1ba4      	subs	r4, r4, r6
 8004a30:	10a4      	asrs	r4, r4, #2
 8004a32:	2500      	movs	r5, #0
 8004a34:	42a5      	cmp	r5, r4
 8004a36:	d109      	bne.n	8004a4c <__libc_init_array+0x24>
 8004a38:	4e0b      	ldr	r6, [pc, #44]	; (8004a68 <__libc_init_array+0x40>)
 8004a3a:	4c0c      	ldr	r4, [pc, #48]	; (8004a6c <__libc_init_array+0x44>)
 8004a3c:	f000 f820 	bl	8004a80 <_init>
 8004a40:	1ba4      	subs	r4, r4, r6
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	2500      	movs	r5, #0
 8004a46:	42a5      	cmp	r5, r4
 8004a48:	d105      	bne.n	8004a56 <__libc_init_array+0x2e>
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a50:	4798      	blx	r3
 8004a52:	3501      	adds	r5, #1
 8004a54:	e7ee      	b.n	8004a34 <__libc_init_array+0xc>
 8004a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a5a:	4798      	blx	r3
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7f2      	b.n	8004a46 <__libc_init_array+0x1e>
 8004a60:	08004ab8 	.word	0x08004ab8
 8004a64:	08004ab8 	.word	0x08004ab8
 8004a68:	08004ab8 	.word	0x08004ab8
 8004a6c:	08004ac0 	.word	0x08004ac0

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
